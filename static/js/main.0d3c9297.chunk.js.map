{"version":3,"sources":["logic/operate.js","components/buttons.js","components/calculator.js","App.js","logic/calculate.js","reportWebVitals.js","index.js"],"names":["operate","numberOne","numberTwo","operation","one","Big","two","plus","toString","minus","times","div","err","mod","Error","Buttons","props","clickHandle","event","onButtonPress","bind","map","symbol","test","type","className","onClick","id","React","Component","Calculator","this","data","onDataChange","total","next","name","placeholder","PureComponent","App","useState","setData","obj","buttonName","target","innerHTML","match","includes","parseFloat","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0d3c9297.chunk.js","sourcesContent":["import Big from 'big.js';\n\nexport default function operate(numberOne, numberTwo, operation) {\n  const one = Big(numberOne);\n  const two = Big(numberTwo);\n  if (operation === '+') {\n    return one.plus(two).toString();\n  }\n  if (operation === '-') {\n    return one.minus(two).toString();\n  }\n  if (operation === '×') {\n    return one.times(two).toString();\n  }\n  if (operation === '÷') {\n    try {\n      return one.div(two).toString();\n    } catch (err) {\n      return \"Can't divide by 0.\";\n    }\n  }\n  if (operation === '%') {\n    try {\n      return one.mod(two).toString();\n    } catch (err) {\n      return \"Can't divide by 0.\";\n    }\n  }\n  throw Error(`Unknown operation '${operation}'`);\n}\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nclass Buttons extends React.Component {\n  constructor(props) {\n    super(props);\n    this.clickHandle = this.clickHandle.bind(this);\n  }\n\n  clickHandle = (event) => {\n    const { onButtonPress } = this.props;\n    return onButtonPress(event);\n  }\n\n  render() {\n    const symbols = [\n      'AC', '+/-', '%', '÷',\n      '7', '8', '9', '×',\n      '4', '5', '6', '-',\n      '1', '2', '3', '+',\n      '0', '.', '=',\n    ];\n    const buttons = symbols.map((symbol) => {\n      if (/[÷×+\\-=]/.test(symbol) && symbol !== '+/-') {\n        return (<button key={symbol} type=\"button\" className=\"calc btn orange\" onClick={this.clickHandle}>{symbol}</button>);\n      }\n      if (symbol === '0') {\n        return (<button key={symbol} type=\"button\" id=\"zero\" className=\"calc btn\" onClick={this.clickHandle}>0</button>);\n      }\n      return (<button key={symbol} type=\"button\" className=\"calc btn\" onClick={this.clickHandle}>{symbol}</button>);\n    });\n    return buttons;\n  }\n}\n\nButtons.propTypes = {\n  onButtonPress: propTypes.func.isRequired,\n};\n\nexport default Buttons;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport Buttons from './buttons';\n\nclass Calculator extends React.PureComponent {\n  render() {\n    const { data, onDataChange } = this.props;\n    const { total, operation, next } = data;\n    return (\n      <div className=\"calculator\">\n        <div id=\"entry\" className=\"calc\" name=\"entry\" placeholder=\"0\">\n          <span>{total}</span>\n          <span>{operation}</span>\n          <span>{next}</span>\n        </div>\n        <Buttons onButtonPress={onDataChange} />\n      </div>\n    );\n  }\n}\n\nCalculator.propTypes = {\n  onDataChange: propTypes.func.isRequired,\n  data: propTypes.instanceOf(Object).isRequired,\n};\n\nexport default Calculator;\n","import React, { useState } from 'react';\nimport calculate from './logic/calculate';\nimport Calculator from './components/calculator';\n\nfunction App() {\n  const [data, setData] = useState({\n    total: '0',\n    next: null,\n    operation: null,\n  });\n  const changeHandle = (event) => {\n    setData(calculate(data, event.target.innerHTML));\n  };\n  return (\n    <div className=\"container\">\n      <h1>The Calculator Web App</h1>\n      <Calculator\n        data={data}\n        onDataChange={changeHandle}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import operate from './operate';\n\nfunction isNumber(item) {\n  return !!item.match(/[0-9]+/);\n}\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:s      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  if (buttonName === 'AC' || obj.total === 'Can\\'t divide by 0.') {\n    return {\n      total: '0',\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    if (buttonName === '0' && obj.next === '0') {\n      return {};\n    }\n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next && obj.total) {\n        return { ...obj, next: obj.next + buttonName };\n      }\n      return { ...obj, next: buttonName };\n    }\n    // If there is no operation, update next and clear the value\n    if (obj.next) {\n      return {\n        next: obj.next + buttonName,\n        total: null,\n      };\n    }\n    return {\n      next: buttonName,\n      total: null,\n    };\n  }\n\n  if (buttonName === '.') {\n    if (obj.next) {\n      if (obj.next.includes('.')) {\n        return { ...obj };\n      }\n      return { ...obj, next: `${obj.next}.` };\n    }\n    if (obj.operation) {\n      return { next: '0.' };\n    }\n    if (obj.total) {\n      if (obj.total.includes('.')) {\n        return {};\n      }\n      return { total: `${obj.total}.` };\n    }\n    return { total: '0.' };\n  }\n\n  if (buttonName === '=') {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null,\n      };\n    }\n    // '=' with no operation, nothing to do\n    return {};\n  }\n\n  if (buttonName === '+/-') {\n    if (obj.next) {\n      return { ...obj, next: (-1 * parseFloat(obj.next)).toString() };\n    }\n    if (obj.total) {\n      return { ...obj, total: (-1 * parseFloat(obj.total)).toString() };\n    }\n    return {};\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  // if (!obj.next && !obj.total) {\n  //   return {};\n  // }\n\n  // User pressed an operation after pressing '='\n  if (!obj.next && obj.total && !obj.operation) {\n    return { ...obj, operation: buttonName };\n  }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation) {\n    if ((obj.total || obj.total === '0') && !obj.next) {\n      return { ...obj, operation: buttonName };\n    }\n\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName,\n    };\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return { operation: buttonName };\n  }\n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName,\n  };\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS,\n      getFID,\n      getFCP,\n      getLCP,\n      getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}